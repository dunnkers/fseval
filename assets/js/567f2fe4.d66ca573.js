"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[543],{8215:function(t,e,a){var n=a(7294);e.Z=function(t){var e=t.children,a=t.hidden,r=t.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},e)}},9877:function(t,e,a){a.d(e,{Z:function(){return p}});var n=a(7462),r=a(7294),l=a(2389),i=a(5773),s=a(6010),o="tabItem_LplD";function d(t){var e,a,l,d=t.lazy,p=t.block,u=t.defaultValue,c=t.values,m=t.groupId,f=t.className,k=r.Children.map(t.children,(function(t){if((0,r.isValidElement)(t)&&void 0!==t.props.value)return t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof t.type?t.type:t.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=c?c:k.map((function(t){var e=t.props;return{value:e.value,label:e.label,attributes:e.attributes}})),h=(0,i.lx)(g,(function(t,e){return t.value===e.value}));if(h.length>0)throw new Error('Docusaurus error: Duplicate values "'+h.map((function(t){return t.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===u?u:null!=(e=null!=u?u:null==(a=k.find((function(t){return t.props.default})))?void 0:a.props.value)?e:null==(l=k[0])?void 0:l.props.value;if(null!==b&&!g.some((function(t){return t.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+g.map((function(t){return t.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,i.UB)(),v=N.tabGroupChoices,y=N.setTabGroupChoices,C=(0,r.useState)(b),_=C[0],w=C[1],T=[],D=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var x=v[m];null!=x&&x!==_&&g.some((function(t){return t.value===x}))&&w(x)}var I=function(t){var e=t.currentTarget,a=T.indexOf(e),n=g[a].value;n!==_&&(D(e),w(n),null!=m&&y(m,n))},S=function(t){var e,a=null;switch(t.key){case"ArrowRight":var n=T.indexOf(t.currentTarget)+1;a=T[n]||T[0];break;case"ArrowLeft":var r=T.indexOf(t.currentTarget)-1;a=T[r]||T[T.length-1]}null==(e=a)||e.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":p},f)},g.map((function(t){var e=t.value,a=t.label,l=t.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:_===e?0:-1,"aria-selected":_===e,key:e,ref:function(t){return T.push(t)},onKeyDown:S,onFocus:I,onClick:I},l,{className:(0,s.Z)("tabs__item",o,null==l?void 0:l.className,{"tabs__item--active":_===e})}),null!=a?a:e)}))),d?(0,r.cloneElement)(k.filter((function(t){return t.props.value===_}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},k.map((function(t,e){return(0,r.cloneElement)(t,{key:e,hidden:t.props.value!==_})}))))}function p(t){var e=(0,l.Z)();return r.createElement(d,(0,n.Z)({key:String(e)},t))}},677:function(t,e,a){a.r(e),a.d(e,{contentTitle:function(){return m},default:function(){return h},frontMatter:function(){return c},metadata:function(){return f},toc:function(){return k}});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=a(9877),s=a(8215),o=a(1736),d=a(7754),p=a(7557),u=["components"],c={sidebar_position:2,title:"fseval.config.DatasetConfig"},m="DatasetConfig",f={unversionedId:"config/DatasetConfig",id:"config/DatasetConfig",title:"fseval.config.DatasetConfig",description:"Configures a dataset, to be used in the pipeline. Can be loaded from various sources",source:"@site/docs/config/DatasetConfig.mdx",sourceDirName:"config",slug:"/config/DatasetConfig",permalink:"/fseval/docs/config/DatasetConfig",editUrl:"https://github.com/dunnkers/fseval/tree/website/docs/config/DatasetConfig.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"fseval.config.DatasetConfig"},sidebar:"tutorialSidebar",previous:{title:"fseval.config.PipelineConfig",permalink:"/fseval/docs/config/PipelineConfig"},next:{title:"fseval.config.CrossValidatorConfig",permalink:"/fseval/docs/config/CrossValidatorConfig"}},k=[{value:"Adapters",id:"adapters",children:[{value:"<code>OpenMLDataset</code>",id:"openmldataset",children:[{value:"Example",id:"example",children:[],level:4}],level:3},{value:"<code>WandbDataset</code>",id:"wandbdataset",children:[{value:"Example",id:"example-1",children:[],level:4}],level:3},{value:"&lt;&gt; Functions",id:"-functions",children:[],level:3},{value:"\u2699\ufe0f Custom adapter",id:"\ufe0f-custom-adapter",children:[],level:3}],level:2},{value:"More examples",id:"more-examples",children:[],level:2}],g={toc:k};function h(t){var e=t.components,c=(0,r.Z)(t,u);return(0,l.kt)("wrapper",(0,n.Z)({},g,c,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"datasetconfig"},"DatasetConfig"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'class fseval.config.DatasetConfig(\n    name: str=MISSING,\n    task: Task=MISSING,\n    adapter: Any=MISSING,\n    adapter_callable: str="get_data",\n    feature_importances: Optional[Dict[str, float]]=None,\n    group: Optional[str]=None,\n    domain: Optional[str]=None,\n)\n')),(0,l.kt)("p",null,"Configures a dataset, to be used in the pipeline. Can be loaded from various sources\nusing an 'adapter'."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"name")," : str"),(0,l.kt)("td",{parentName:"tr",align:null},"Human-readable name of dataset.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"task")," : ",(0,l.kt)("a",{parentName:"td",href:"/fseval/docs/types/Task"},"Task")),(0,l.kt)("td",{parentName:"tr",align:null},"Either Task.classification or Task.regression.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"adapter")," : Any"),(0,l.kt)("td",{parentName:"tr",align:null},"Dataset adapter. must be of fseval.types.AbstractAdapter type, i.e. must implement a get_data() -> (X, y) method. Can also be a callable; then the callable must return a tuple (X, y).")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"adapter_callable")," : Any"),(0,l.kt)("td",{parentName:"tr",align:null},"Adapter class callable. the function to be called on the instantiated class to fetch the data (X, y). is ignored when the target itself is a function callable.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"feature_importances")," : Optional[Dict","[str, float]","]"),(0,l.kt)("td",{parentName:"tr",align:null},"Weightings indicating relevant features or instances. Should be a dict with each key and value like the following pattern:     ",(0,l.kt)("inlineCode",{parentName:"td"},"X[<numpy selector>] = <float>")," Example:     ",(0,l.kt)("inlineCode",{parentName:"td"},"X[:, 0:3] = 1.0")," which sets the 0-3 features as maximally relevant and all others minimally relevant.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"group")," : Optional","[str]"),(0,l.kt)("td",{parentName:"tr",align:null},"An optional group attribute, such to group datasets in the analytics stage.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"domain")," : Optional","[str]"),(0,l.kt)("td",{parentName:"tr",align:null},"Dataset domain, e.g. medicine, finance, etc.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h2",{id:"adapters"},"Adapters"),(0,l.kt)("p",null,"To load data, you require to define an ",(0,l.kt)("strong",{parentName:"p"},"adapter"),". Several are available."),(0,l.kt)("h3",{id:"openmldataset"},(0,l.kt)("inlineCode",{parentName:"h3"},"OpenMLDataset")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class fseval.config.adapters.OpenMLDataset(\n    dataset_id: int=MISSING,\n    target_column: str=MISSING,\n    drop_qualitative: bool=False,\n)\n")),(0,l.kt)("p",null,"Allows loading a dataset from ",(0,l.kt)("a",{parentName:"p",href:"https://www.openml.org/"},"OpenML"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"dataset_id : int"),(0,l.kt)("td",{parentName:"tr",align:null},"The dataset ID.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"target_column : str"),(0,l.kt)("td",{parentName:"tr",align:null},"Which column to use as a target. This column will be used as ",(0,l.kt)("inlineCode",{parentName:"td"},"y"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"drop_qualitative : bool"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to drop any column that is not numeric.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h4",{id:"example"},"Example"),(0,l.kt)("p",null,"So, for example, loading the ",(0,l.kt)("a",{parentName:"p",href:"https://www.openml.org/d/61"},"Iris")," dataset:"),(0,l.kt)(i.Z,{groupId:"config-representation",mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"yaml",label:"YAML",default:!0,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-yaml",title:"conf/dataset/iris.yaml",mdxType:"CodeBlock"},"name: Iris Flowers\ntask: classification\nadapter:\n  _target_: fseval.adapters.openml.OpenML\n  dataset_id: 61\n  target_column: class\n")),(0,l.kt)(s.Z,{value:"structured",label:"Structured Config",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from hydra.core.config_store import ConfigStore\nfrom fseval.config import DatasetConfig\nfrom fseval.config.adapters import OpenMLDataset\nfrom fseval.types import Task\n\ncs = ConfigStore.instance()\n\ncs.store(\n    group="dataset",\n    name="iris",\n    node=DatasetConfig(\n        name="Iris Flowers",\n        task=Task.classification,\n        adapter=OpenMLDataset(dataset_id=61, target_column="class"),\n    ),\n)\n')))),(0,l.kt)("h3",{id:"wandbdataset"},(0,l.kt)("inlineCode",{parentName:"h3"},"WandbDataset")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class fseval.config.adapters.WandbDataset(\n    artifact_id: str=MISSING\n)\n")),(0,l.kt)("p",null,"Loads a dataset from the Weights and Biases ",(0,l.kt)("a",{parentName:"p",href:"https://docs.wandb.ai/guides/artifacts"},"artifacts")," store. Data must be stored in two tables ",(0,l.kt)("inlineCode",{parentName:"p"},"X")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Y"),"."),(0,l.kt)("p",null,"Requires being logged into the Weights and Biases CLI (in other words, having the ",(0,l.kt)("a",{parentName:"p",href:"https://docs.wandb.ai/guides/track/public-api-guide#authentication"},(0,l.kt)("inlineCode",{parentName:"a"},"WANDB_API_KEY"))," set), and having installed the ",(0,l.kt)("a",{parentName:"p",href:"https://pypi.org/project/wandb/"},(0,l.kt)("inlineCode",{parentName:"a"},"wandb"))," python package."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null}),(0,l.kt)("th",{parentName:"tr",align:null}))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"artifact_id : str"),(0,l.kt)("td",{parentName:"tr",align:null},"The ID of the artifact to fetch. Has to be of the following form: ",(0,l.kt)("inlineCode",{parentName:"td"},"<entity>/<project>/<artifact_name>:<artifact_version>"),". ",(0,l.kt)("br",null),(0,l.kt)("br",null),"For example:",(0,l.kt)("br",null)," ",(0,l.kt)("inlineCode",{parentName:"td"},"dunnkers/synthetic-datasets/switch:v0")," would be a valid artifact_id.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h4",{id:"example-1"},"Example"),(0,l.kt)("p",null,"For example, we could load the following artifact:"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"wandb adapter artifact example",src:a(570).Z,width:"831",height:"421"})),(0,l.kt)("p",null,"using the following config:"),(0,l.kt)(i.Z,{groupId:"config-representation",mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"yaml",label:"YAML",default:!0,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-yaml",title:"conf/dataset/chen.yaml",mdxType:"CodeBlock"},"name: Switch (Chen et al.)\ntask: regression\nadapter:\n  _target_: fseval.adapters.wandb.Wandb\n  artifact_id: dunnkers/synthetic-datasets/switch:v0\nfeature_importances:\n  X[:5000, 0:4]: 1.0\n  X[5000:, 4:8]: 1.0\n")),(0,l.kt)(s.Z,{value:"structured",label:"Structured Config",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from hydra.core.config_store import ConfigStore\nfrom fseval.config import DatasetConfig\nfrom fseval.config.adapters import WandbDataset\nfrom fseval.types import Task\n\ncs = ConfigStore.instance()\n\ncs.store(\n    group="dataset",\n    name="chen_switch",\n    node=DatasetConfig(\n        name="Switch (Chen et al.)",\n        task=Task.regression,\n        adapter=WandbDataset(artifact_id="dunnkers/synthetic-datasets/switch:v0"),\n        feature_importances={\n            "X[:5000, 0:4]": 1.0,\n            "X[5000:, 4:8]": 1.0\n        }\n    ),\n)\n')))),(0,l.kt)("h3",{id:"-functions"},"<",">"," Functions"),(0,l.kt)("p",null,"We can also use ",(0,l.kt)("em",{parentName:"p"},"functions")," as adapters, as long as they return a tuple ",(0,l.kt)("inlineCode",{parentName:"p"},"(X, y)"),". e.g. using ",(0,l.kt)("inlineCode",{parentName:"p"},"sklearn.datasets.make_classification")," as an adapter:"),(0,l.kt)(i.Z,{groupId:"config-representation",mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"yaml",label:"YAML",default:!0,mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-yaml",title:"conf/dataset/synthetic.yaml",mdxType:"CodeBlock"},d.Z)),(0,l.kt)(s.Z,{value:"structured",label:"Structured Config",mdxType:"TabItem"},(0,l.kt)(o.Z,{className:"language-py",title:"conf/dataset/synthetic.py",mdxType:"CodeBlock"},p.Z))),(0,l.kt)("h3",{id:"\ufe0f-custom-adapter"},"\u2699\ufe0f Custom adapter"),(0,l.kt)("p",null,"To load datasets from different sources, we can use different ",(0,l.kt)("strong",{parentName:"p"},"adapters"),". You can create an adapter by implementing this interface:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"class AbstractAdapter(ABC, BaseEstimator):\n    @abstractmethod\n    def get_data(self) -> Tuple[List, List]:\n        ...\n")),(0,l.kt)("p",null,"For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="benchmark.py"',title:'"benchmark.py"'},"@dataclass\nclass CustomAdapter(AbstractAdapter):\n    def get_data(self) -> Tuple[List, List]:\n        X = [[]]\n        Y = []\n\n        return X, Y\n")),(0,l.kt)("h2",{id:"more-examples"},"More examples"),(0,l.kt)("p",null,"For more examples, see the repo for more ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/dunnkers/fseval/tree/master/tests/integration/conf/dataset"},"dataset configs"),"."))}h.isMDXComponent=!0},7557:function(t,e){e.Z='from fseval.config import DatasetConfig\nfrom fseval.types import Task\n\nsynthetic_dataset = DatasetConfig(\n    name="My synthetic dataset",\n    task=Task.classification,\n    adapter=dict(\n        _target_="sklearn.datasets.make_classification",\n        n_samples=10000,\n        n_informative=2,\n        n_classes=2,\n        n_features=20,\n        n_redundant=0,\n        random_state=0,\n        shuffle=False,\n    ),\n    feature_importances={"X[:, 0:2]": 1.0},\n)\n'},7754:function(t,e){e.Z="name: My synthetic dataset\ntask: classification\nadapter:\n  _target_: sklearn.datasets.make_classification\n  n_samples: 10000\n  n_informative: 2\n  n_classes: 2\n  n_features: 20\n  n_redundant: 0\n  random_state: 0\n  shuffle: false\nfeature_importances:\n  X[:, 0:2]: 1.0\n"},570:function(t,e,a){e.Z=a.p+"assets/images/wandb-e5459ba16598fb96e63c0d6c45ca6214.png"}}]);