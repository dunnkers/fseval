"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[699],{6160:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return E},default:function(){return M},frontMatter:function(){return x},metadata:function(){return T},toc:function(){return A}});var a=n(7462),r=n(3366),i=n(7294),s=n(3905),o=n(9877),l=n(8215),c=n(8906),m=n(1832),f=n(6934),u=n(102),p=(n(4251),function e(t,n,a){void 0===n&&(n={items:{}}),void 0===a&&(a="");for(var r=0,i=Object.entries(t);r<i.length;r++){var s=i[r],o=s[0],l=s[1],c="string"!=typeof l,m=(a+"/"+o).replace("/root",""),f=m.split(".").pop();n.items[o]={index:o,hasChildren:c,children:c?Object.keys(l):void 0,canMove:!1,canRename:!1,data:{filePath:m,fileExtension:f,key:o,content:c?null:l}},c&&e(l,n,a+"/"+o)}return n});function d(e){var t=e.template,n=e.treeId,a=e.viewState,r=e.onPrimaryAction,s=e.environment,o=p(t);return i.createElement(m.q,{dataProvider:new f.j(o.items,(function(e,t){return Object.assign({},e,{data:t})})),getItemTitle:function(e){return e.data.key},viewState:a,onPrimaryAction:r},i.createElement(u.m,{treeId:n,rootItem:"root",treeLabel:"Tree Example",ref:s}))}var _=n(1736),k={data:{filePath:"",fileExtension:"",content:""}};function g(e){var t=e.template,n=e.treeId,a=e.viewState,r=e.defaultItem,s=void 0===r?k:r,o=(0,i.useRef)(),l=(0,i.useState)(s),m=l[0],f=l[1],u=(m||k).data;return(0,i.useEffect)((function(){try{for(var e,t=o.current,a=t.treeEnvironmentContext.viewState[n].selectedItems,r=(0,c.Z)(a);!(e=r()).done;){var i=e.value;i&&t.invokePrimaryAction(i,n)}}catch(s){return}})),i.createElement("div",{className:"row"},i.createElement("div",{className:"col col--4"},i.createElement(d,{template:t,treeId:n,viewState:a,onPrimaryAction:f,environment:o})),i.createElement("div",{className:"col col--8"},i.createElement(_.Z,{className:"language-"+u.fileExtension,title:u.filePath},u.content)))}var h=n(7754),v=n(3221),y=n(7557),b=n(6572),N=n(1262),C=["src"],w=function(e){var t=e.src,a=(0,r.Z)(e,C);return i.createElement(N.Z,null,(function(){var e=n(7011),r=(0,i.useRef)(null);return(0,i.useEffect)((function(){var n=r.current;e.create(t,n,a)}),[t]),i.createElement("div",{ref:r})}))},I=["components"],x={sidebar_position:1},E="Getting started",T={unversionedId:"quick-start",id:"quick-start",title:"Getting started",description:"To get started, there's two main resources.",source:"@site/docs/quick-start.mdx",sourceDirName:".",slug:"/quick-start",permalink:"/fseval/docs/quick-start",editUrl:"https://github.com/dunnkers/fseval/tree/website/docs/quick-start.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Motivation",permalink:"/fseval/docs/motivation"},next:{title:"The pipeline",permalink:"/fseval/docs/the-pipeline"}},A=[{value:"\u26a1\ufe0f Quick start",id:"\ufe0f-quick-start",children:[],level:2}],S={toc:A};function M(e){var t=e.components,i=(0,r.Z)(e,I);return(0,s.kt)("wrapper",(0,a.Z)({},S,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"getting-started"},"Getting started"),(0,s.kt)("p",null,"To get started, there's two main resources."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"A ",(0,s.kt)("a",{parentName:"p",href:"https://colab.research.google.com/drive/1Bsuxxuw0-mEsYRSnNbmvD_wNUAkOPiQa?usp=sharing"},"Google Colab")),(0,s.kt)("p",{parentName:"li"},(0,s.kt)("a",{parentName:"p",href:"https://colab.research.google.com/drive/1Bsuxxuw0-mEsYRSnNbmvD_wNUAkOPiQa?usp=sharing"},(0,s.kt)("img",{parentName:"a",src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"The ",(0,s.kt)("a",{parentName:"p",href:"#%EF%B8%8F-quick-start"},"\u26a1\ufe0f Quick start")," guide below \ud83d\udc47\ud83c\udffb"))),(0,s.kt)("h2",{id:"\ufe0f-quick-start"},"\u26a1\ufe0f Quick start"),(0,s.kt)("p",null,"Let's run our first experiment. The goal will be to compare two feature selectors ",(0,s.kt)("em",{parentName:"p"},"ANOVA F-Value")," and ",(0,s.kt)("em",{parentName:"p"},"Mutual Info"),"."),(0,s.kt)("p",null,"Install fseval:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"pip install fseval\n")),(0,s.kt)(o.Z,{groupId:"config-representation",mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"yaml",label:"YAML",default:!0,mdxType:"TabItem"},(0,s.kt)("p",null,"Given the following ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/dunnkers/fseval/tree/master/examples/quick-start-yaml"},"configuration"),":"),(0,s.kt)(g,{treeId:"tree-1",template:{root:{conf:{dataset:{"synthetic.yaml":h.Z},ranker:{"anova.yaml":"name: ANOVA F-value\nestimator:\n  _target_: benchmark.ANOVAFValueClassifier\n_estimator_type: classifier\nestimates_feature_importances: true\n","mutual_info.yaml":"name: Mutual Info\nestimator:\n  _target_: benchmark.MutualInfoClassifier\n_estimator_type: classifier\nmultioutput: false\nestimates_feature_importances: true\n"},validator:{"knn.yaml":"name: k-NN\nestimator:\n  _target_: sklearn.neighbors.KNeighborsClassifier\n_estimator_type: classifier\nmultioutput: false\nestimates_target: true\n"},"my_config.yaml":v.Z},"benchmark.py":'import hydra\nfrom sklearn.base import BaseEstimator\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\n\nfrom fseval.config import PipelineConfig\nfrom fseval.main import run_pipeline\n\n\nclass ANOVAFValueClassifier(BaseEstimator):\n    def fit(self, X, y):\n        scores, _ = f_classif(X, y)\n        self.feature_importances_ = scores\n\n\nclass MutualInfoClassifier(BaseEstimator):\n    def fit(self, X, y):\n        scores = mutual_info_classif(X, y)\n        self.feature_importances_ = scores\n\n\n@hydra.main(config_path="conf", config_name="my_config", version_base="1.1")\ndef main(cfg: PipelineConfig) -> None:\n    run_pipeline(cfg)\n\n\nif __name__ == "__main__":\n    main()\n'}},viewState:{"tree-1":{expandedItems:["conf","ranker","dataset","validator"],selectedItems:["my_config.yaml"]}},mdxType:"FileTreeCodeViewer"})),(0,s.kt)(l.Z,{value:"structured",label:"Structured Config",mdxType:"TabItem"},(0,s.kt)("p",null,"Given the following ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/dunnkers/fseval/tree/master/examples/quick-start-structured-configs"},"configuration"),":"),(0,s.kt)(g,{treeId:"tree-2",template:{root:{conf:{dataset:{"synthetic.py":y.Z},ranker:{"anova.py":'from fseval.config import EstimatorConfig\n\nanova_ranker = EstimatorConfig(\n    name="ANOVA F-value",\n    estimator=dict(\n        _target_="benchmark.ANOVAFValueClassifier",\n    ),\n    _estimator_type="classifier",\n    estimates_feature_importances=True,\n)\n',"mutual_info.py":'from fseval.config import EstimatorConfig\n\nmutual_info_ranker = EstimatorConfig(\n    name="Mutual Info",\n    estimator=dict(\n        _target_="benchmark.MutualInfoClassifier",\n    ),\n    _estimator_type="classifier",\n    multioutput=False,\n    estimates_feature_importances=True,\n)\n'},validator:{"knn.py":'from fseval.config import EstimatorConfig\n\nknn_validator = EstimatorConfig(\n    name="k-NN",\n    estimator=dict(\n        _target_="sklearn.neighbors.KNeighborsClassifier",\n    ),\n    _estimator_type="classifier",\n    multioutput=False,\n    estimates_target=True,\n)\n'},"my_config.py":b.Z},"benchmark.py":'import hydra\nfrom conf.dataset.synthetic import synthetic_dataset\nfrom conf.my_config import my_config\nfrom conf.ranker.anova import anova_ranker\nfrom conf.ranker.mutual_info import mutual_info_ranker\nfrom conf.validator.knn import knn_validator\nfrom hydra.core.config_store import ConfigStore\nfrom sklearn.base import BaseEstimator\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\n\nfrom fseval.config import PipelineConfig\nfrom fseval.main import run_pipeline\n\n\nclass ANOVAFValueClassifier(BaseEstimator):\n    def fit(self, X, y):\n        scores, _ = f_classif(X, y)\n        self.feature_importances_ = scores\n\n\nclass MutualInfoClassifier(BaseEstimator):\n    def fit(self, X, y):\n        scores = mutual_info_classif(X, y)\n        self.feature_importances_ = scores\n\n\ncs = ConfigStore.instance()\ncs.store(group="dataset", name="synthetic", node=synthetic_dataset)\ncs.store(group="ranker", name="anova", node=anova_ranker)\ncs.store(group="ranker", name="mutual_info", node=mutual_info_ranker)\ncs.store(group="validator", name="knn", node=knn_validator)\ncs.store(name="my_config", node=my_config)\n\n\n@hydra.main(config_path="conf", config_name="my_config", version_base="1.1")\ndef main(cfg: PipelineConfig) -> None:\n    run_pipeline(cfg)\n\n\nif __name__ == "__main__":\n    main()\n'}},viewState:{"tree-2":{expandedItems:["conf","ranker","dataset","validator"],selectedItems:["my_config.py"]}},mdxType:"FileTreeCodeViewer"}))),(0,s.kt)("br",null),(0,s.kt)("p",null,"Let's export the results to a local SQLite database."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"results_db=/Users/dunnkers/Downloads/results.sqlite # edit this url\n")),(0,s.kt)("p",null,"We can now run the benchmark:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"python benchmark.py --multirun ranker='glob(*)' +callbacks.to_sql.url=sqlite:///$results_db\n")),(0,s.kt)(w,{src:"/fseval/cast/examples_quick_start.cast",rows:30,idleTimeLimit:3,preload:!0,mdxType:"AsciinemaPlayer"}),(0,s.kt)("br",null),(0,s.kt)("p",null,"The results are now stored in a SQLite database. We can open the data using ",(0,s.kt)("a",{parentName:"p",href:"https://sqlitebrowser.org/"},"DB Browser for SQLite"),". We can access the validation scores in the ",(0,s.kt)("inlineCode",{parentName:"p"},"validation_scores")," table:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"validation data",src:n(3495).Z,width:"941",height:"793"})),(0,s.kt)("p",null,"In the example above,\nthe graph plots the ",(0,s.kt)("strong",{parentName:"p"},"feature subset size")," (",(0,s.kt)("inlineCode",{parentName:"p"},"n_features_to_select"),") vs. ",(0,s.kt)("strong",{parentName:"p"},"classification accuracy")," (",(0,s.kt)("inlineCode",{parentName:"p"},"score"),")\nfor ",(0,s.kt)("span",{style:{backgroundColor:"#5050FF",color:"white"}},"ANOVA F value")," vs. ",(0,s.kt)("span",{style:{backgroundColor:"#0075DD",color:"white"}},"Mutual Info"),".\nThis way, we can easily compare two feature selectors: ANOVA F Value and Mutual Info \u2728."))}M.isMDXComponent=!0},7557:function(e,t){t.Z='from fseval.config import DatasetConfig\nfrom fseval.types import Task\n\nsynthetic_dataset = DatasetConfig(\n    name="My synthetic dataset",\n    task=Task.classification,\n    adapter=dict(\n        _target_="sklearn.datasets.make_classification",\n        n_samples=10000,\n        n_informative=2,\n        n_classes=2,\n        n_features=20,\n        n_redundant=0,\n        random_state=0,\n        shuffle=False,\n    ),\n    feature_importances={"X[:, 0:2]": 1.0},\n)\n'},6572:function(e,t){t.Z='from omegaconf import MISSING\n\nfrom fseval.config import PipelineConfig\n\n# To set PipelineConfig defaults in a Structured Config, we must redefine the entire\n# defaults list.\nmy_config = PipelineConfig(\n    n_bootstraps=1,\n    defaults=[\n        "_self_",\n        # highlight-next-line\n        {"dataset": "synthetic"},\n        {"cv": "kfold"},\n        {"resample": "shuffle"},\n        {"ranker": MISSING},\n        # highlight-next-line\n        {"validator": "knn"},\n        {"storage": "local"},\n        # highlight-next-line\n        {"callbacks": ["to_sql"]},\n        {"metrics": ["feature_importances", "ranking_scores", "validation_scores"]},\n        {"override hydra/job_logging": "colorlog"},\n        {"override hydra/hydra_logging": "colorlog"},\n    ],\n)\n'},7754:function(e,t){t.Z="name: My synthetic dataset\ntask: classification\nadapter:\n  _target_: sklearn.datasets.make_classification\n  n_samples: 10000\n  n_informative: 2\n  n_classes: 2\n  n_features: 20\n  n_redundant: 0\n  random_state: 0\n  shuffle: false\nfeature_importances:\n  X[:, 0:2]: 1.0\n"},3221:function(e,t){t.Z="defaults:\n  - base_pipeline_config\n  - _self_\n  - override dataset: synthetic\n  - override validator: knn\n  - override /callbacks:\n      - to_sql\n\nn_bootstraps: 1\n"},3495:function(e,t,n){t.Z=n.p+"assets/images/validation_data-87fd715695a815828bb6f0dda59e0fc6.png"}}]);